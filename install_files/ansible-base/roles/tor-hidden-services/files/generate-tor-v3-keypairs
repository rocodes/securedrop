#!/usr/bin/env python3
import base64
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import x25519


def generate_x25519_keypair():
    """This function generate new keys and returns them as tuple.

    :returns: Tuple(public_key, private_key)
    """

    private_key = x25519.X25519PrivateKey.generate()
    private_bytes = private_key.private_bytes(
        encoding=serialization.Encoding.Raw,
        format=serialization.PrivateFormat.Raw,
        encryption_algorithm=serialization.NoEncryption())
    public_key = private_key.public_key()
    public_bytes = public_key.public_bytes(
        encoding=serialization.Encoding.Raw,
        format=serialization.PublicFormat.Raw)

    public = base64.b32encode(public_bytes)[:-4].decode("utf-8")
    private = base64.b32encode(private_bytes)[:-4].decode("utf-8")
    return public, private


def generate_new_tor_v3_keypairs():
    """
    This method will either read the old keys or generate a new
    public/private key pair.
    """
    # No old keys, generate and store them first
    app_journalist_public_key, app_journalist_private_key = generate_x25519_keypair()
    # For app ssh service
    app_ssh_public_key, app_ssh_private_key = generate_x25519_keypair()
    # For mon ssh service
    mon_ssh_public_key, mon_ssh_private_key = generate_x25519_keypair()
    tor_v3_service_info = {
            "app_journalist_public_key": app_journalist_public_key,
            "app_journalist_private_key": app_journalist_private_key,
            "app_ssh_public_key": app_ssh_public_key,
            "app_ssh_private_key": app_ssh_private_key,
            "mon_ssh_public_key": mon_ssh_public_key,
            "mon_ssh_private_key": mon_ssh_private_key,
    }
    # Send results to stdout
    print(json.dumps(tor_v3_service_info))


if __name__ == "__main__":
    generate_new_tor_v3_keypairs()